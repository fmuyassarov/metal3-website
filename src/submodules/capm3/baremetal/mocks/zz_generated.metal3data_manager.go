// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./baremetal/metal3data_manager.go

// Package baremetal_mocks is a generated GoMock package.
package baremetal_mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataManagerInterface is a mock of DataManagerInterface interface
type MockDataManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataManagerInterfaceMockRecorder
}

// MockDataManagerInterfaceMockRecorder is the mock recorder for MockDataManagerInterface
type MockDataManagerInterfaceMockRecorder struct {
	mock *MockDataManagerInterface
}

// NewMockDataManagerInterface creates a new mock instance
func NewMockDataManagerInterface(ctrl *gomock.Controller) *MockDataManagerInterface {
	mock := &MockDataManagerInterface{ctrl: ctrl}
	mock.recorder = &MockDataManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataManagerInterface) EXPECT() *MockDataManagerInterfaceMockRecorder {
	return m.recorder
}

// SetFinalizer mocks base method
func (m *MockDataManagerInterface) SetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizer")
}

// SetFinalizer indicates an expected call of SetFinalizer
func (mr *MockDataManagerInterfaceMockRecorder) SetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizer", reflect.TypeOf((*MockDataManagerInterface)(nil).SetFinalizer))
}

// UnsetFinalizer mocks base method
func (m *MockDataManagerInterface) UnsetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetFinalizer")
}

// UnsetFinalizer indicates an expected call of UnsetFinalizer
func (mr *MockDataManagerInterfaceMockRecorder) UnsetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetFinalizer", reflect.TypeOf((*MockDataManagerInterface)(nil).UnsetFinalizer))
}

// Reconcile mocks base method
func (m *MockDataManagerInterface) Reconcile(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reconcile", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reconcile indicates an expected call of Reconcile
func (mr *MockDataManagerInterfaceMockRecorder) Reconcile(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reconcile", reflect.TypeOf((*MockDataManagerInterface)(nil).Reconcile), ctx)
}

// ReleaseLeases mocks base method
func (m *MockDataManagerInterface) ReleaseLeases(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLeases", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLeases indicates an expected call of ReleaseLeases
func (mr *MockDataManagerInterfaceMockRecorder) ReleaseLeases(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLeases", reflect.TypeOf((*MockDataManagerInterface)(nil).ReleaseLeases), ctx)
}
